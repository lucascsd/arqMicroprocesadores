A - Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.

    Existen los perfiles A, R y M.
    - Cortex A: Procesadores de aplicaciones que están diseñados para manejar aplicaciones complejas, como sistemas operativos (SO). Estas aplicaciones requieren la mayor potencia de procesamiento, soporte de sistema de memoria virtual con unidades de administración de memoria (MMU).-

    - Cortex R: Procesadores de tiempo real y alto rendimiento dirigidos principalmente a aplicaciones de tiempo real. Es esencial una alta potencia de procesamiento y gran fiabilidad, y como tambien son importantes la baja latencia y el determinismo.-

    - Cortex M: Microcontroladores, donde son importantes criterios como el bajo coste, el bajo consumo, la eficiencia energética y la baja latencia de las interrupciones. Al mismo tiempo, el diseño del procesador tiene que ser fácil de usar y capaz de proporcionar un comportamiento determinista, como se requiere en muchos sistemas de control en tiempo real.- 

1 - Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.

    - Cortex M0 / M0+: Implementación mínima para bajo consumo y bajo costo. Los procesadores Cortex-M0, Cortex-M0+ y Cortex-M1 están basados en la arquitectura ARMv6-M.

    - Cortex M3 / M4 / M7: Mayor performance, agregan funcionalidades para procesamiento digital de señales, unidad de protección de memoria, etc. Los procesadores Cortex-M3 y Cortex-M4 están basados en ARMv7-M. El procesador Cortex-M4 ofrezca un mayor rendimiento en aplicaciones DSP y admita operaciones de punto flotante.

2 - ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique

    - Por que permite instrucciones de 16 y 32 bits. Lo que nos proporciona realizar operaciones en menos cantidad de instrucciones y no requiere de cambio de estado. La mayoria de las operaciones es posible realizar con instrucciones de 16 bits. Tambien reduce el consumo de energía.

3 - ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?

    - En la arquitectura LOAD-STORE, los datos deben cargarse desde la memoria hacia los registros disponibles, procesarse y luego volver a escribirse en la memoria utilizando una serie de instrucciones independientes. Al ser una arquitectura de 32 bits, permite un direccionamiento de 2^32.

4 - ¿Cómo es el mapa de memoria de la familia?

- El espacio de direcciones de 4GB de los procesadores Cortex-M está dividido en varias regiones de memoria.

5 - ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

    El MSP se utiliza para el kernel del sistema operativo y los controladores de interrupciones. El PSP es utilizado por tareas de aplicación.

    Las operaciones de pila como las instrucciones PUSH y POP, y la mayoría de las instrucciones que utilizan SP (R13) utilizan el puntero de pila seleccionado actualmente. También puede acceder a MSP y PSP directamente usando las instrucciones de MRS y MSR. En aplicaciones simples sin un sistema operativo integrado o RTOS, puede usar el MSP para todas las operaciones e ignorar el PSP.
    En sistemas con un sistema operativo integrado o RTOS, los controladores de excepciones (incluida parte del kernel del sistema operativo) utilizan el MSP, mientras que las tareas de la aplicación utilizan el PSP. Cada tarea de la aplicación tiene su propio espacio de pila, y el código de cambio de contexto en el sistema operativo actualiza el PSP cada vez que se cambia el contexto.

6 - Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. 
Describa un ejemplo en el que se pasa del modo privilegiado a no priviligiado y nuevamente a privilegiado.

    - Los procesadores Cortex-M3 y Cortex-M4 tienen dos estados de funcionamiento y dos modos. Además, los procesadores pueden tener niveles de acceso privilegiados y no privilegiados. El nivel de acceso privilegiado puede acceder a todos los recursos del procesador, mientras que el nivel de acceso sin privilegios significa que algunas regiones de memoria son inaccesibles y algunas operaciones no se pueden utilizar.

    Estados de operación
    • Debug state: cuando el procesador se detiene (por ejemplo, por el depurador o después de alcanzar un punto de interrupción), entra en estado de depuración y deja de ejecutar instrucciones.
    • Thumb state: si el procesador está ejecutando un código de programa (instrucciones de pulgar), se encuentra en el estado de pulgar. A diferencia de los procesadores ARM Ò clásicos como ARM7TDMI, no hay estado ARM porque los procesadores Cortex-M no admiten el conjunto de instrucciones ARM.

    Modos de operación
    • Modo de administrador: cuando se ejecuta un administrador de excepciones, como una rutina de servicio de interrupción (ISR). Cuando está en modo de controlador, el procesador siempre tiene un nivel de acceso privilegiado.
    • Modo de subproceso: cuando se ejecuta un código de aplicación normal, el procesador puede estar en el nivel de acceso privilegiado o en el nivel de acceso no privilegiado. Esto está controlado por un registro especial llamado "CONTROL".

    El software puede cambiar el procesador en el modo de subproceso privilegiado al modo de subproceso sin privilegios. Sin embargo, no puede cambiar de no privilegiado a privilegiado.
    Si es necesario, el procesador debe utilizar el mecanismo de excepción para manejar el cambio.

    La separación de los niveles de acceso privilegiado y no privilegiado permite a los diseñadores de sistemas desarrollar sistemas integrados robustos al proporcionar un mecanismo para salvaguardar los accesos a la memoria a las regiones críticas y al proporcionar un modelo de seguridad básico.

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo

    - Se entiendo por ortogonalidad de registros a que cualquier instruccion de 16/32 bits puede utilizar como origen o destino los registros sin limitaciones de direccionamientos.

8. ¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)? Dé un ejemplo

    Las instrucción de TI mejoran el rendimiento del código del programa de manera significativa porque evita rupturas del pipeline , por lo tanot reduce el número de instrucciones de saltos. Por ejemplo, una secuencia de programa corta IF-THEN-ELSE que normalmente requiere una rama condicional y una rama incondicional puede ser reemplazada por una sola instrucción de TI.

    ( Ejemplo de las diapostivas )
    ITTE NE
    ANDNE r0,r0,r1
    ADDNE r2,r2,#1
    MOVEQ r2,r3

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).

Las excepciones de reset, NMI y HardFault tienen niveles de prioridad fijos. Sus niveles de prioridad se representan con números negativos para indicar que son de mayor prioridad que otras excepciones.

Reset   = -3.
NMI     = -2. Interrupción no enmascarable (NMI), se puede generar desde periféricos del propio IC o desde fuentes externas.
Hard Fault = -1. Corresponde a todas las condiciones de fault y no es posible llamar a un handler.

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?

La pila es una estructura de datos tipo LIFO, donde se almacenan las variables de un conexto cuando se accede a una funcion para luego recuperar ese conexto al regresar a la funcion de origen. De los registros r0 a r3 estan disponibles para trabajar, mientras que los restantes registros deben usarse las acciones PUSH y POP para salvaguardar la informacion del contexto de origen. Si la funcion posee retorno de datos, se usa el registro r0.

11. Describa la secuencia de reset del microprocesador.

Luego del reset y antes de que el procesador comience a ejecutar el programa, los procesadores Cortex-M leen las dos primeras palabras de la memoria. (Direccion 0x00000000). El cominezo del espacio de memoria contiene la tabla de vectores, y las dos primeras palabras en la tabla vectorial son el valor inicial del puntero de la pila principal (MSP) y el vector de reset, que contiene la dirección de inicio del manejador/controlador de reset. Después de que estos registros son leidos, el procesador configura el MSP y el Contador del programa (PC) con estos valores.

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?

Los core peripheral son aquellos perifericos propios del procesador (NVIC, Systick, etc). El resto de los perifericos son externos, no pertencen al procesador y se encuentran mapeados en el mapa de memorias.

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

El diseño de los procesadores Cortex-M3 y Cortex-M4 admite tres niveles fijos de máxima prioridad y hasta 256 niveles de prioridad programable (con un máximo de 128 niveles de preferencia). Los niveles de prioridad de interrupción se controlan mediante registros de nivel de prioridad, con un ancho de 3 bits a 8 bits. Por ejemplo, si solo se implementan 3 bits de nivel de prioridad en el diseño, se tienen hasta 8 niveles de prioridad.

14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

CMSIS, es el estándar de interfaz de software del microcontrolador ARM® Cortex. 
Es una capa de abstracción de hardware independiente del proveedor de la serie de procesadores Cortex-M.
CMSIS simplifica la reutilización del software.

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo

El NVIC verifica el nivel de prioridad de la interrupción para conocer su nivel de prioridad. 
Si la interrupción tiene mayor prioridad, la tarea que se está ejecutando se interrumpe y se salvaguarda todo en contexto en los registros de la pila como el valor de retorno del PC. 
A continuación pasa a ejecutarse el handler de la interrupción. Tambien se ejecuta la excepción de retorno, en la cual se vuelve a cargar el contexto antes de la interrupción.

16. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.

Tail Chaining se produce al pasar de una interrupcion a otra de mayor prioridad.
Late Arrival se produce cuando se atiende una interrupciones dentro de otra interrupción, la ejecución de la entrada al handler de esa interupción se genera una de mayor prioridad. Cuando termina de ejecutarse la excepción de mayor prioridad, en vez de hacer el unstacking y el stacking de nuevo para ingresar a la excepción pendiente, el procesador salta ese paso e ingresa directamente al handler de la excepción pendiente y usa el mismo contexto.

17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?

Los procesadores Cortex-M tienen un pequeño temporizador integrado llamado temporizador SysTick. Está integrado como parte del NVIC y puede generar la excepción SysTick. El temporizador SysTick es un temporizador de disminución simple de 24 bits y puede funcionar con la frecuencia del reloj del procesador o desde una frecuencia de reloj de referencia (normalmente una fuente de reloj en el chip).

18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

La MPU es un dispositivo programable que se puede usar para definir permisos de acceso a la memoria (por ejemplo, acceso privilegiado o acceso completo) y atributos de memoria (por ejemplo, almacenable en búfer, almacenable en caché) para diferentes regiones de memoria.

19. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?

La MPU en los procesadores Cortex-M3 y Cortex-M4 puede admitir hasta ocho regiones de memoria programables, cada una con sus propias direcciones de inicio, tamaños y configuraciones programables.
Si un acceso a la memoria viola los permisos de acceso definidos por la MPU, o accede a una ubicación de memoria que no está definida en las regiones MPU programadas, la transferencia se bloquearía y se dispararía una excepción de falla. El manejador de excepciones de fallas desencadenado podría ser la falla MemManage o la excepción HardFault. 

20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo

Una excepción que suele utilizar un sistema operativo en procesos como el cambio de contexto.
El cambio de contexto se lleva a cabo en PendSV, que normalmente se programa en el nivel de prioridad más bajo. Esto evita que suceda el cambio de contexto en medio de un controlador de interrupciones.

21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido.

Mediante la excepcion SVC, el microprocesador permite pasar del modo no privilegia al modo privilegiado mediante una excepcion que se produce al hacer uso del handler del SVC.

ISA
1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.





